{
  "version": 3,
  "sources": ["../../../src/modules/index.ts"],
  "sourcesContent": ["import * as nearAPI from 'near-api-js'\nimport { Action, SignedTransaction } from 'near-api-js/lib/transaction';\nimport * as sha256 from 'js-sha256'\nimport { KeyPair, PublicKey } from 'near-api-js/lib/utils';\nimport { networkId } from '../config'\nimport { AccessKeyQuery } from '../models/types'\n// import { FinalExecutionOutcome } from 'near-api-js/providers/provider'\n\ntype SignedTransactionProps = {\n\tnonce: number\n\tactions: Action[]\n\trecentBlockHash: Buffer\n\tsender: string\n\tkeyPair: KeyPair\n\tcontractName: string\n}\n\ntype RequirementProps = {\n\tprovider: nearAPI.providers.JsonRpcProvider\n\tsender: string\n\tpublicKey: PublicKey\n}\ntype Requirements = {\n\taccessKey: AccessKeyQuery,\n\tnonce: number,\n\trecentBlockHash: Buffer\n}\n\nexport function signTransaction({ actions, nonce, recentBlockHash, sender, keyPair, contractName }: SignedTransactionProps): SignedTransaction {\n\tconst publicKey = keyPair.getPublicKey()\n\n\t// create transaction\n\tconst transaction = nearAPI.transactions.createTransaction(\n\t\tsender,\n\t\tpublicKey,\n\t\tcontractName,\n\t\tnonce,\n\t\tactions,\n\t\trecentBlockHash\n\t);\n\tconst serializedTx = nearAPI.utils.serialize.serialize(\n\t\tnearAPI.transactions.SCHEMA,\n\t\ttransaction\n\t);\n\tconst serializedTxHash = new Uint8Array(sha256.sha256.array(serializedTx));\n\tconst signature = keyPair.sign(serializedTxHash);\n\n\t// now we can sign the transaction :)\n\tconst signedTransaction = new nearAPI.transactions.SignedTransaction({\n\t\ttransaction,\n\t\tsignature: new nearAPI.transactions.Signature({\n\t\t\tkeyType: transaction.publicKey.keyType,\n\t\t\tdata: signature.signature,\n\t\t}),\n\t});\n\n\treturn signedTransaction;\n}\n\nexport async function sendTransaction(provider: nearAPI.providers.JsonRpcProvider, signedTransaction: SignedTransaction): Promise<any> {\n\treturn new Promise<any>(async (resolve, reject) => {\n\t\ttry {\n\t\t\t// encodes signed transaction to serialized Borsh (required for all transactions)\n\t\t\tconst signedSerializedTx = signedTransaction.encode();\n\n\t\t\t// TODO: Correct type\n\t\t\tconst result = await provider.sendJsonRpc(\"broadcast_tx_commit\", [\n\t\t\t\tBuffer.from(signedSerializedTx).toString(\"base64\"),\n\t\t\t]) as nearAPI.providers.FinalExecutionOutcome\n\n\t\t\t// console results :)\n\t\t\t// console.log(\"Transaction Results: \", result.transaction);\n\t\t\tconsole.log(\n\t\t\t\t`https://explorer.${networkId}.near.org/transactions/${result?.transaction.hash}`\n\t\t\t);\n\n\t\t\tresolve(result.transaction)\n\t\t} catch (error) {\n\t\t\treject(error)\n\t\t}\n\t})\n}\n\n\nexport async function initRequirements({ provider, sender, publicKey }: RequirementProps) {\n\treturn new Promise<Requirements>(async (resolve, reject) => {\n\n\t\tconst accessKey = await provider.query<AccessKeyQuery>(\n\t\t\t`access_key/${sender}/${publicKey}`,\n\t\t\t\"\");\n\n\t\t// checks to make sure provided key is a full access key\n\t\tif (accessKey.permission !== \"FullAccess\") {\n\t\t\treject(new Error(\n\t\t\t\t`Account [ ${sender} ] does not have permission to send tokens using key: [ ${publicKey} ]`\n\t\t\t))\n\t\t}\n\n\t\tconst nonce = ++accessKey.nonce;\n\n\t\tconst recentBlockHash = nearAPI.utils.serialize.base_decode(\n\t\t\taccessKey.block_hash\n\t\t);\n\n\t\tresolve({ accessKey, nonce, recentBlockHash })\n\t});\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAyB;AAEzB,aAAwB;AAExB,oBAA0B;AAwBnB,yBAAyB,EAAE,SAAS,OAAO,iBAAiB,QAAQ,SAAS,gBAA2D;AAC9I,QAAM,YAAY,QAAQ;AAG1B,QAAM,cAAc,QAAQ,aAAa,kBACxC,QACA,WACA,cACA,OACA,SACA;AAED,QAAM,eAAe,QAAQ,MAAM,UAAU,UAC5C,QAAQ,aAAa,QACrB;AAED,QAAM,mBAAmB,IAAI,WAAW,OAAO,OAAO,MAAM;AAC5D,QAAM,YAAY,QAAQ,KAAK;AAG/B,QAAM,oBAAoB,IAAI,QAAQ,aAAa,kBAAkB;AAAA,IACpE;AAAA,IACA,WAAW,IAAI,QAAQ,aAAa,UAAU;AAAA,MAC7C,SAAS,YAAY,UAAU;AAAA,MAC/B,MAAM,UAAU;AAAA;AAAA;AAIlB,SAAO;AAAA;AAGR,+BAAsC,UAA6C,mBAAoD;AACtI,SAAO,IAAI,QAAa,OAAO,SAAS,WAAW;AAClD,QAAI;AAEH,YAAM,qBAAqB,kBAAkB;AAG7C,YAAM,SAAS,MAAM,SAAS,YAAY,uBAAuB;AAAA,QAChE,OAAO,KAAK,oBAAoB,SAAS;AAAA;AAK1C,cAAQ,IACP,oBAAoB,iDAAmC,iCAAQ,YAAY;AAG5E,cAAQ,OAAO;AAAA,aACP,OAAP;AACD,aAAO;AAAA;AAAA;AAAA;AAMV,gCAAuC,EAAE,UAAU,QAAQ,aAA+B;AACzF,SAAO,IAAI,QAAsB,OAAO,SAAS,WAAW;AAE3D,UAAM,YAAY,MAAM,SAAS,MAChC,cAAc,UAAU,aACxB;AAGD,QAAI,UAAU,eAAe,cAAc;AAC1C,aAAO,IAAI,MACV,aAAa,iEAAiE;AAAA;AAIhF,UAAM,QAAQ,EAAE,UAAU;AAE1B,UAAM,kBAAkB,QAAQ,MAAM,UAAU,YAC/C,UAAU;AAGX,YAAQ,EAAE,WAAW,OAAO;AAAA;AAAA;",
  "names": []
}
